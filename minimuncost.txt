class Solution:
  def findMinCost(self, x, y, cost, costy):
    m=len(x)
    n=len(y)
    dp=[[0]*(n+1) for _ in range(m+1)]
    for i in range(m+1):
      dp[i][0]=0
    for j in range(n+1):
      dp[0][j]=0
    for i in range(1,m+1):
      for j in range(1,n+1):
        if x[i-1]==y[j-1]:
          dp[i][j]=1+dp[i-1][j-1]
        else:
          dp[i][j]=max(dp[i][j-1], dp[i-1][j])
    return (m-dp[m][n])*costX+(n-dp[m][n])*costY


if __name__ == '__main__':
  T = int(input())
  for i in range(T):
    X, Y, costX, costY = input().split()
    costX= int(costx)
    costY = int(costy)
    ob = Solution()
    ans = ob.findMinCost(X, Y, costX, costY)
    print(ans)